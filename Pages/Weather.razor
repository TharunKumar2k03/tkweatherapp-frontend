@page "/weather"
@using Supabase.Postgrest
@using Supabase.Postgrest.Attributes
@using Supabase.Postgrest.Models
@using TheWeatherApp.Models
@using Newtonsoft.Json
@using MudBlazor
@using Supabase.Gotrue
@using TheWeatherApp.Services
@using Supabase
@using System.Net.Http.Json

<PageTitle>Weather</PageTitle>

<HeadContent>
    <link href="css/weather.css" rel="stylesheet" />
</HeadContent>

@inject HttpClient HttpClient
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject AuthService AuthService
@inject ISnackbar Snackbar
@inject CacheService CacheService
@inject WeatherAlertService WeatherAlertService

<div class="background-image">
    <MudContainer Class="weather-page">
        <!-- Search Box in top right -->
        <div class="search-container">
            <div class="search-box">
                <input type="text" 
                       @bind-value="searchText" 
                       @bind-value:event="oninput"
                       @onkeyup="HandleSearchInput"
                       placeholder="Search for a city..." />
                @if (locationSuggestions.Any())
                {
                    <div class="suggestions-dropdown">
                        @foreach (var suggestion in locationSuggestions)
                        {
                            <div class="suggestion-item" @onclick="() => SelectLocation(suggestion)">
                                <span class="city">@suggestion.Name</span>
                                @if (!string.IsNullOrEmpty(suggestion.State))
                                {
                                    <span class="state">@suggestion.State,</span>
                                }
                                <span class="country">@suggestion.Country</span>
                            </div>
                        }
                    </div>
                }
            </div>
            <button class="search-button" @onclick="SearchCity">
                <MudIcon Icon="@Icons.Material.Filled.Search" Color="Color.Inherit" />
            </button>
        </div>

        <!-- Current Location Weather Box -->
        <div class="current-location-box">
            @if (isLoadingLocation)
            {
                <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                <span>Detecting location...</span>
            }
            else if (!string.IsNullOrEmpty(locationError))
            {
                <span class="location-error">@locationError</span>
                <button class="retry-button" @onclick="GetCurrentLocationWeather">
                    <MudIcon Icon="@Icons.Material.Filled.Refresh" Class="mr-2" />
                    Retry
                </button>
            }
            else if (currentLocationWeather != null)
            {
                <div class="location-header">
                    <MudIcon Icon="@Icons.Material.Filled.LocationOn" Class="location-icon" />
                    <span>Current Location: @currentLocationWeather.CityName</span>
                </div>
                <div class="current-weather-info">
                    <div class="temp">@Math.Round(currentLocationWeather.Temperature, 1)°C</div>
                    <div class="condition">@currentLocationWeather.Condition</div>
                </div>
            }
        </div>

        <!-- Searched City Current Weather -->
        @if (searchedCityWeather != null)
        {
            <div class="weather-card searched-city">
                <div class="like-button-container">
                    <button class="like-button" @onclick="AddToFavorites">
                        <MudIcon Icon="@(IsFavorite(searchedCityWeather.name) ? Icons.Material.Filled.Favorite : Icons.Material.Filled.FavoriteBorder)"
                                 Color="@(IsFavorite(searchedCityWeather.name) ? Color.Error : Color.Inherit)" />
                    </button>
                </div>
                <div class="weather-content">
                    <h3>@searchedCityWeather.name</h3>
                    <div class="main-temp">@Math.Round(searchedCityWeather.main.temp, 1)°C</div>
                    <div class="condition">@searchedCityWeather.weather[0].description</div>
                </div>
                
                <div class="button-group">
                    <!-- Forecast Dropdown -->
                    <MudMenu 
                        Class="forecast-dropdown"
                        FullWidth="true"
                        AnchorOrigin="Origin.BottomCenter"
                        TransformOrigin="Origin.TopCenter">
                        <ActivatorContent>
                            <MudButton 
                                EndIcon="@Icons.Material.Filled.KeyboardArrowDown"
                                Color="Color.Primary"
                                Variant="Variant.Filled">
                                View Forecast
                            </MudButton>
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem OnClick="() => ShowForecast(5)">5 Days Forecast</MudMenuItem>
                            <MudMenuItem OnClick="() => ShowForecast(10)">10 Days Forecast</MudMenuItem>
                            <MudMenuItem OnClick="() => ShowForecast(15)">15 Days Forecast</MudMenuItem>
                        </ChildContent>
                    </MudMenu>
    
                    @if (showForecast)
                    {
                        <MudButton
                            StartIcon="@Icons.Material.Filled.Analytics"
                            Color="Color.Secondary"
                            Variant="Variant.Filled"
                            OnClick="ToggleAnalytics"
                            Class="analytics-button">
                            Analytics
                        </MudButton>
                    }
                </div>
            </div>
        }

        <!-- Forecast Display or Popular Cities -->
        @if (showForecast && WeatherData != null)
        {
            <div class="forecast-container">
                <h2>@WeatherData.city.name - @selectedDays Day Forecast</h2>
                @if (showAnalytics)
                {
                    <div class="analytics-container">
                        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                            <MudTabPanel Text="Temperature">
                                <MudChart ChartType="ChartType.Bar"
                                         ChartSeries="@temperatureChartData"
                                         XAxisLabels="@chartLabels"
                                         Width="100%"
                                         Height="350px">
                                    <CustomGraphics>
                                        <MudText Typo="Typo.h6" Class="text-center">Temperature Trends (°C)</MudText>
                                    </CustomGraphics>
                                </MudChart>
                            </MudTabPanel>
                            
                            <MudTabPanel Text="Humidity & Wind">
                                <MudChart ChartType="ChartType.Bar"
                                         ChartSeries="@weatherMetricsChartData"
                                         XAxisLabels="@chartLabels"
                                         Width="100%"
                                         Height="350px">
                                    <CustomGraphics>
                                        <MudText Typo="Typo.h6" Class="text-center">Weather Metrics</MudText>
                                    </CustomGraphics>
                                </MudChart>
                            </MudTabPanel>
                        </MudTabs>
                        
                        <div class="chart-legend">
                            <div class="legend-item">
                                <span class="legend-color" style="background-color: #1E88E5"></span>
                                <span>Temperature (°C)</span>
                            </div>
                            <div class="legend-item">
                                <span class="legend-color" style="background-color: #43A047"></span>
                                <span>Humidity (%)</span>
                            </div>
                            <div class="legend-item">
                                <span class="legend-color" style="background-color: #FFA726"></span>
                                <span>Wind Speed (km/h)</span>
                            </div>
                            <div class="legend-item">
                                <span class="legend-color" style="background-color: #E53935"></span>
                                <span>Feels Like (°C)</span>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <MudGrid>
                        @foreach (var forecast in WeatherData.list.Where((_, i) => i % 8 == 0).Take(selectedDays))
                        {
                            <MudItem xs="12" sm="6" md="4">
                                <div class="weather-card forecast-card">
                                    <div class="date">
                                        @DateTimeOffset.FromUnixTimeSeconds(forecast.dt).DateTime.ToShortDateString()
                                    </div>
                                    <div class="weather-icon">
                                        @if (forecast.weather[0].description.Contains("cloud"))
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Cloud" />
                                        }
                                        else if (forecast.weather[0].description.Contains("rain"))
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Thunderstorm" />
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.WbSunny" />
                                        }
                                    </div>
                                    <div class="forecast-details">
                                        <div class="temperature">@Math.Round(forecast.main.temp, 1)°C</div>
                                        <div class="min-max">
                                            <span>L: @Math.Round(forecast.main.temp_min, 1)°C</span>
                                            <span>H: @Math.Round(forecast.main.temp_max, 1)°C</span>
                                        </div>
                                        <div class="condition">@forecast.weather[0].description</div>
                                        <div class="weather-details">
                                            <span><MudIcon Icon="@Icons.Material.Filled.Opacity" /> @forecast.main.humidity%</span>
                                            <span><MudIcon Icon="@Icons.Material.Filled.Air" /> @forecast.wind.speed km/h</span>
                                        </div>
                                    </div>
                                </div>
                            </MudItem>
                        }
                    </MudGrid>
                }
            </div>
        }
        else
        {
            <!-- Popular Cities Display -->
            <h2 class="popular-cities-title">Popular Cities</h2>
            <MudGrid>
                @foreach (var city in TopCitiesWeather)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <div class="weather-card">
                            <div class="weather-icon">
                                @if (city.Condition.Contains("cloud"))
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Cloud" />
                                }
                                else if (city.Condition.Contains("rain"))
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Thunderstorm" />
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.WbSunny" />
                                }
                            </div>
                            <h3>@city.CityName</h3>
                            <div class="temp">@Math.Round(city.Temperature, 1)°C</div>
                            <div class="condition">@city.Condition</div>
                        </div>
                    </MudItem>
                }
            </MudGrid>
        }
    </MudContainer>
</div>  <!-- Add this closing div tag -->

<style>
    .background-image {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-image: url('images/pexels-pixabay-259698.jpg');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        margin: 0;
        padding: 0;
        overflow-y: auto;
    }

    .weather-page {
        position: relative;
        z-index: 1;
        min-height: 100vh;
        padding: 20px;
        background: transparent !important;
    }

    .weather-card {
        background: rgba(255, 255, 255, 0.1) !important;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
    }

    .popular-cities-title {
        color: white;
    }
</style>

@code {
    private string searchText = "";
    private List<LocationSuggestion> locationSuggestions = new();
    private Timer? debounceTimer;

    private Root? WeatherData;
    private CurrentWeatherResponse? searchedCityWeather;
    private CityWeather? currentLocationWeather;
    private List<CityWeather> TopCitiesWeather = new();
    private string ApiKey = "902a7076f0a33886f94bd38cc08b4f24";
    private bool showForecast = false;
    private int selectedDays = 5;
    private List<string> favoriteCities = new();
    private bool isFavorite = false;
    private User? currentUser;
    private bool isLoadingLocation = false;
    private string? locationError;
    
    // Chart-related variables
    private bool showAnalytics = false;
    private List<ChartSeries> temperatureChartData = new();
    private List<ChartSeries> weatherMetricsChartData = new();
    private string[] chartLabels = Array.Empty<string>();

    public class WeatherState
    {
        public string? CurrentCity { get; set; }
        public string? SearchedCity { get; set; }
        public bool? ShowForecast { get; set; }
        public int? SelectedDays { get; set; }
        public List<string>? FavoriteCities { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentUser = await Task.FromResult(AuthService.GetUser());
            if (currentUser != null)
            {
                await LoadUserFavourites();
                // Start weather monitoring if user is logged in
                WeatherAlertService.StartWeatherMonitoring(ApiKey, favoriteCities);
            }
            await LoadTopCitiesWeather();
            await GetCurrentLocationWeather();

            var lastSearchedCity = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "lastSearchedCity");
            if (!string.IsNullOrEmpty(lastSearchedCity))
            {
                searchText = lastSearchedCity;
                await SearchCity();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error initializing: {ex.Message}", Severity.Error);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && currentUser != null)
        {
            var state = new
            {
                CurrentCity = searchText,
                SearchedCity = searchedCityWeather?.name,
                ShowForecast = showForecast,
                SelectedDays = selectedDays,
                FavoriteCities = favoriteCities
            };
            await CacheService.SaveUserState(NavManager.Uri, state);
        }
    }

    public void Dispose()
    {
        WeatherAlertService.StopWeatherMonitoring();
    }

    private async Task GetCurrentLocationWeather()
    {
        try
        {
            isLoadingLocation = true;
            locationError = null;
            StateHasChanged();

            var location = await JSRuntime.InvokeAsync<LocationResult>("getLocationAsync");
            var response = await HttpClient.GetFromJsonAsync<CurrentWeatherResponse>(
                $"https://api.openweathermap.org/data/2.5/weather?lat={location.Latitude}&lon={location.Longitude}&appid={ApiKey}&units=metric");

            if (response != null)
            {
                currentLocationWeather = new CityWeather
                {
                    CityName = response.name,
                    Temperature = response.main.temp,
                    Condition = response.weather[0].description
                };
            }
        }
        catch (Exception ex)
        {
            locationError = ex.Message;
            Console.WriteLine($"Error getting current location weather: {ex.Message}");
        }
        finally
        {
            isLoadingLocation = false;
            StateHasChanged();
        }
    }

    private async Task ShowForecast(int days)
    {
        selectedDays = days;
        showForecast = true;
        
        // Fetch forecast data if not already available
        if (WeatherData == null || WeatherData.list.Count == 0)
        {
            await FetchForecastData();
        }
        else if (showAnalytics)
        {
            UpdateChartData(); // Update charts when days selection changes
        }
    }

    private async Task FetchForecastData()
    {
        try
        {
            var forecastResponse = await HttpClient.GetFromJsonAsync<Root>(
                $"https://api.openweathermap.org/data/2.5/forecast?q={searchText}&appid={ApiKey}&units=metric&cnt=40");

            if (forecastResponse != null)
            {
                WeatherData = forecastResponse;
                if (showAnalytics)
                {
                    UpdateChartData(); // Update charts when new data is fetched
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error fetching forecast data", Severity.Error);
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task HandleSearchInput(KeyboardEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            locationSuggestions.Clear();
            return;
        }

        // Reset timer
        debounceTimer?.Dispose();
        
        // Set new timer
        debounceTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                try
                {
                    var response = await HttpClient.GetFromJsonAsync<List<LocationSuggestion>>(
                        $"http://api.openweathermap.org/geo/1.0/direct?q={searchText}&limit=5&appid={ApiKey}");
                    
                    if (response != null)
                    {
                        locationSuggestions = response;
                        StateHasChanged();
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error fetching suggestions: {ex.Message}");
                }
            });
        }, null, 300, Timeout.Infinite); // 300ms delay
    }

    private async Task SelectLocation(LocationSuggestion suggestion)
    {
        searchText = suggestion.Name;
        locationSuggestions.Clear();
        await SearchCity();
    }

    private async Task SearchCity()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            return;
        }

        try
        {
            var response = await HttpClient.GetFromJsonAsync<CurrentWeatherResponse>(
                $"https://api.openweathermap.org/data/2.5/weather?q={searchText}&appid={ApiKey}&units=metric");

            if (response != null)
            {
                searchedCityWeather = response;
                isFavorite = IsFavorite(searchedCityWeather.name);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "lastSearchedCity", searchText);
                
                // Automatically fetch forecast data when a new city is searched
                if (showForecast)
                {
                    await FetchForecastData();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error searching for city: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadTopCitiesWeather()
    {
        try
        {
            string[] cities = { "Delhi", "Bengaluru", "Mumbai", "Chennai", "Kolkata" };
            TopCitiesWeather.Clear();

            foreach (var city in cities)
            {
                var response = await HttpClient.GetFromJsonAsync<CurrentWeatherResponse>(
                    $"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={ApiKey}&units=metric");

                if (response != null)
                {
                    TopCitiesWeather.Add(new CityWeather
                    {
                        CityName = city,
                        Temperature = response.main.temp,
                        Condition = response.weather?.FirstOrDefault()?.main ?? "Unknown",
                        Icon = response.weather?.FirstOrDefault()?.icon ?? "01d"
                    });
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading top cities: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadUserFavourites()
    {
        try
        {
            if (currentUser != null)
            {
                var response = await HttpClient.GetFromJsonAsync<UserFavorites>($"http://localhost:5188/favorites/{currentUser.Email}");
                if (response != null)
                {
                    favoriteCities = response.FavoriteCities;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading favorites: {ex.Message}", Severity.Error);
        }
    }

    private async Task AddToFavorites()
    {
        try
        {
            if (currentUser == null || searchedCityWeather == null)
            {
                Snackbar.Add("Please login to add favorites", Severity.Warning);
                return;
            }

            var favorite = new AddCityRequest
            {
                Email = currentUser.Email,
                City = searchedCityWeather.name
            };

            var response = await HttpClient.PostAsJsonAsync("http://localhost:5188/favorites/add", favorite);
            
            if (response.IsSuccessStatusCode)
            {
                favoriteCities.Add(searchedCityWeather.name);
                isFavorite = true;
                Snackbar.Add("Added to favorites", Severity.Success);
                await LoadUserFavourites();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error adding to favorites: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding to favorites: {ex.Message}", Severity.Error);
        }
    }

    private bool IsFavorite(string cityName)
    {
        return favoriteCities.Any(c => c.Equals(cityName, StringComparison.OrdinalIgnoreCase));
    }

    private async Task SaveState()
    {
        try
        {
            var state = new WeatherState
            {
                CurrentCity = searchText,
                SearchedCity = searchedCityWeather?.name,
                ShowForecast = showForecast,
                SelectedDays = selectedDays,
                FavoriteCities = favoriteCities
            };
            await CacheService.SaveUserState("/weather", state);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving state: {ex.Message}", Severity.Error);
        }
    }

    private async Task RestoreState()
    {
        try
        {
            var state = await CacheService.GetUserState<WeatherState>();
            if (state != null)
            {
                searchText = state.CurrentCity ?? "";
                if (!string.IsNullOrEmpty(state.SearchedCity))
                {
                    searchText = state.SearchedCity;
                    await SearchCity();
                }
                showForecast = state.ShowForecast ?? false;
                selectedDays = state.SelectedDays ?? 5;
                favoriteCities = state.FavoriteCities?.ToList() ?? new List<string>();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error restoring state: {ex.Message}", Severity.Error);
        }
    }

    public class CityWeather
    {
        public string CityName { get; set; } = string.Empty;
        public double Temperature { get; set; }
        public string Condition { get; set; } = string.Empty;
        public string Icon { get; set; } = string.Empty;
    }

    public class DOMRect
    {
        public double X { get; set; }
        public double Y { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
        public double Top { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
        public double Left { get; set; }
    }

    public class UserFavorites
    {
        public string Email { get; set; } = string.Empty;
        public List<string> FavoriteCities { get; set; } = new List<string>();
    }

    public class AddCityRequest
    {
        public string Email { get; set; } = string.Empty;
        public string City { get; set; } = string.Empty;
    }

    public class LocationSuggestion
    {
        public string Name { get; set; } = string.Empty;
        public string State { get; set; } = string.Empty;
        public string Country { get; set; } = string.Empty;
    }

    public class LocationResult
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public double Accuracy { get; set; }
    }
    
    // Chart-related methods
    private void ToggleAnalytics()
    {
        showAnalytics = !showAnalytics;
        if (showAnalytics)
        {
            UpdateChartData();
        }
    }

    private void UpdateChartData()
    {
        var forecasts = WeatherData.list.Where((_, i) => i % 8 == 0).Take(selectedDays).ToList();
        
        // Prepare data arrays
        var temperatures = forecasts.Select(f => Math.Round(f.main.temp, 1)).ToArray();
        var feelsLike = forecasts.Select(f => Math.Round(f.main.feels_like, 1)).ToArray();
        var humidity = forecasts.Select(f => (double)f.main.humidity).ToArray();
        var windSpeed = forecasts.Select(f => Math.Round(f.wind.speed * 3.6, 1)).ToArray(); // Convert m/s to km/h
        
        // Update labels
        chartLabels = forecasts.Select(f => 
            DateTimeOffset.FromUnixTimeSeconds(f.dt).DateTime.ToString("MMM dd")).ToArray();

        // Temperature chart data
        temperatureChartData = new List<ChartSeries>
        {
            new ChartSeries { Name = "Temperature", Data = temperatures },
            new ChartSeries { Name = "Feels Like", Data = feelsLike }
        };

        // Weather metrics chart data
        weatherMetricsChartData = new List<ChartSeries>
        {
            new ChartSeries { Name = "Humidity", Data = humidity },
            new ChartSeries { Name = "Wind Speed", Data = windSpeed }
        };
    }
}